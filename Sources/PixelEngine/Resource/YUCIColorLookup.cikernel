kernel vec4 filterKernel(sampler inputImage, sampler inputLUT, float intensity) {
  vec4 textureColor = sample(inputImage,samplerCoord(inputImage));
  textureColor = clamp(textureColor, vec4(0.0), vec4(1.0));

  float blueColor = textureColor.b * 63.0;

  vec2 quad1;
  quad1.y = floor(floor(blueColor) / 8.0);
  quad1.x = floor(blueColor) - (quad1.y * 8.0);

  vec2 quad2;
  quad2.y = floor(ceil(blueColor) / 8.0);
  quad2.x = ceil(blueColor) - (quad2.y * 8.0);

  vec2 texPos1;
  texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.r);
  texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.g);

  vec2 texPos2;
  texPos2.x = (quad2.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.r);
  texPos2.y = (quad2.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.g);

  texPos1.y = 1.0 - texPos1.y;
  texPos2.y = 1.0 - texPos2.y;

  vec4 inputLUTExtent = samplerExtent(inputLUT);

  vec4 newColor1 = sample(inputLUT, samplerTransform(inputLUT, texPos1 * vec2(512.0) + inputLUTExtent.xy));
  vec4 newColor2 = sample(inputLUT, samplerTransform(inputLUT, texPos2 * vec2(512.0) + inputLUTExtent.xy));

  vec4 newColor = mix(newColor1, newColor2, fract(blueColor));
  return mix(textureColor, vec4(newColor.rgb, textureColor.a), intensity);
}
